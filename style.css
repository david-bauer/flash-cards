*, *::before, *::after {
    box-sizing: border-box;
}

:root {
    /*  colors:
        color variables must be saved like this so that opacity can be applied according to the needs of each element
        (https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable)
    */
    --eggshell: 252, 252, 252;
    --light-pink: 255, 226, 237;
    --pink: 255, 175, 204;
    --brown: 51, 38, 29;
    --space: 66, 61, 68;
    --coal: 13, 11, 14;

    /* functional variables: */
    --columns: 4;
    --animation-speed: 150ms;
}

body {
    /*  box shadow:
        created with Josh Comeau's tool: https://www.joshwcomeau.com/shadow-palette/
    */
    --shadow-color: 339deg 48% 52%;
    --shadow-med:
            0.3px 0.5px 0.7px hsl(var(--shadow-color) / 0.36),
            0.8px 1.6px 2px -0.8px hsl(var(--shadow-color) / 0.36),
            2.1px 4.1px 5.2px -1.7px hsl(var(--shadow-color) / 0.36),
            5px 10px 12.6px -2.5px hsl(var(--shadow-color) / 0.36);
    --shadow-low:
            0.3px 0.5px 0.7px hsl(var(--shadow-color) / 0.34),
            0.4px 0.8px 1px -1.2px hsl(var(--shadow-color) / 0.34),
            1px 2px 2.5px -2.5px hsl(var(--shadow-color) / 0.34);

    font-family: raleway, sans-serif;
    margin: 0;
    padding: 0;
    background-color: rgb(var(--neutral));
}

h1, h2, h3 {
    margin: 0;
    text-transform: lowercase;
    font-weight: lighter;
}

h2 {
    font-size: 1.8em;
}

p {
    line-height: 1.5em;
}

button {
    /* override default styling */
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    border: 2px solid transparent;
    cursor: pointer;

    font-weight: normal;
    border-radius: .5em;
}

label {
    text-align: center;
}

i {
    pointer-events: none; /* prevents icons from stealing click events from their parent element */
}


/* page layout styles */
.page {
    margin: 2vh auto;
    width: 75%;
    min-width: 500px;
    min-height: 100vh;

    display: flex;
    flex-direction: column;
    align-items: stretch;

    color: rgb(var(--dark));
}
.page-title {
    color: rgb(var(--white));
    font-size: max(2em, min(7vh, 6vw));
    font-weight: 1000;
}
.content {
    display: flex;
    flex-direction: column;
    gap: 2em;

    width: 100%;
    padding: 2em;
    background-color: rgb(var(--white));
    border-radius: 1rem;
    box-shadow: var(--shadow-med);
}
.content:empty::before {
    text-align: center;
    content: "it's rather empty in here... ";
    color: dimgrey;
}

#footer {
    margin: 0;
    padding: 1em;
    width: 100%;
    background-color: rgb(var(--neutral));
    color: rgb(var(--light));

    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
}


/* flash card styles */
.flash-card-set {
    position: relative; /* required for popup to position correctly */
}

.flash-cards {
    position: relative;
    margin-top: 1em;
    text-align: center;

    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: 1em;
}


/* card styles */
.card {
    aspect-ratio: 1;
    border-radius: 1rem;
    background-color: rgb(var(--light));

    display: flex;
    flex-direction: column;
    justify-content: center;

    transform-style: preserve-3d;
    transition: transform var(--animation-speed) ease;
}
.card.flipped {
    transform: rotate3d(0, 1, 0, 180deg);
}
.card.moving {
    z-index: 2;
    will-change: transform;
    transition: transform 0s !important;
}
/* card flipper (the focusable button on each card) styles */
.card-flipper {
    width: 100%;
    height: 100%;
    border-radius: inherit;
    transform: translateZ(2px);
    background-color: transparent;
}
.flipped .card-flipper {
    transform: translateZ(-1px);
}
.card-flipper:focus {
    outline: 2px solid rgb(var(--dark));
}
/* card specific modify controls  */
.modify-tools {
    position: absolute;
    right: .5rem;
    top: -1ch;
    transform: translateZ(2px);

    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: .5em;

    opacity: 0; /* controls start hidden */
    transition: opacity var(--animation-speed);
}
.modify-tools .button {
    aspect-ratio: 1;
    padding: .25rem;
    background-color: rgb(var(--neutral));
    color: rgb(var(--light));
}
/* card face styles */
.card-face {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: inherit;

    user-select: none;

    display:flex;
    flex-direction: column;
    justify-content: center;
    transition: height var(--animation-speed),
                border-radius var(--animation-speed);
}
.front {
    top: 0;
    transform: translateZ(1px);
    background-color: inherit;
}
.back {
    bottom: 0;
    transform: rotateY(180deg);
    background-color: rgb(var(--neutral));
}
.card-face p {
    padding: .5em;
    margin: auto;
    max-width: 100%;
    overflow-wrap: break-word;

    border-top: 5px solid transparent; /* prevents the text from shifting when borders are added during edit mode */
    border-bottom: 5px solid transparent;
    transition: background-color var(--animation-speed),
                border-bottom-color var(--animation-speed);
}
/*.card-face p > br {*/
/*    display: none; !* prevents user-entered line breaks *!*/
/*}*/


/* card set modify functionality */
.modifying:not(.editable) {
    cursor: move;
}
/* hide the flip button when in modification mode */
.modifying .card-flipper {
    transform: translateZ(-1px);
}
/* show the individual card controls when the modify button is pressed */
.modifying .modify-tools {
    opacity: 1;
}
/* show both faces at the same time */
.modifying > .card-face {
    height: 50%;
}
/* fix the horizontal border between the front and back elements */
.modifying .front {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}
.modifying .back {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    transform: revert;
}
/* make the content of the flashcards look like an input form when editing mode is on */
.editable p {
    background-color: rgb(var(--white));
    border-bottom: 5px solid rgb(var(--neutral));
}
.editable p:focus {
    border-bottom: 5px solid rgb(var(--dark));
    outline: 2px solid rgb(var(--neutral));
}


/* styles for elements that modify the other cards within the card set */
.card-settings {
    background-color: rgb(var(--neutral));
}

.hidden {
    display: none !important;
}


/* form styles */
.new-card-form {
    font-size: 1rem;
    margin: .5rem;
}

input[type="text"] {
    font-size: inherit;
    font-family: inherit;
    line-height: 2em;

    width: 100%;
    margin-top: .25em;
    margin-bottom: .5em;
    padding-left: .5em;

    background-color: rgb(var(--white));
    border: none;
    border-bottom: 5px solid rgb(var(--light));
    color: rgb(var(--dark));
    box-shadow: var(--shadow-low);
    transition: border-bottom-color var(--animation-speed);
}
input[type="text"]:focus {
    border-bottom: 5px solid rgb(var(--dark));
    outline: none;
}


/* button styles */
.button {
    background-color: rgb(var(--light));
    color: rgb(var(--dark));
    box-shadow: var(--shadow-low);
    transition: transform var(--animation-speed),
                background-color var(--animation-speed),
                color var(--animation-speed);
    padding: .25em .5em;
}
.button:is(:hover,:focus) {
    background-color: rgb(var(--dark));
    outline: none;
    color: rgb(var(--white));
}
/* tool tips for buttons with labels */
.button[aria-label]::after {
    content: attr(aria-label);
    font-size: .8rem;
    position: absolute;
    right: calc(100% + .5rem);
    top: 0;
    width: max-content;
    padding: .5rem;
    background-color: rgb(var(--dark));
    color: rgb(var(--white));
    border-radius: .5rem;
    opacity: 0;
    transition: opacity var(--animation-speed) 300ms;
    pointer-events: none;
}
.button[aria-label]:hover::after {
    opacity: 1;
}
/* indent button when pushed */
.button[aria-pressed="true"] {
    transform: translate3d(1px, 1px, 0);
    background-color: rgb(var(--neutral));
    color: rgb(var(--white));
}
.new-set-btn {
    align-self: center;
    padding: 1em;
    margin-top: 2em;
    margin-bottom: 2em;
    box-shadow: var(--shadow-med);
    color: rgb(var(--dark));
}


/* popup styles */
.popup {
    position: absolute;
    width: 100%;
    height: calc(100% - 2em);
    background-color: rgba(var(--white), .6);
    z-index: 2;
}
.popup-content {
    position: absolute;
    min-width: min-content;
    width: clamp(310px, 40%, 500px);
    background-color: rgb(var(--neutral));
    padding: 1em;
    border-radius: .5rem;

    display: flex;
    flex-direction: column;
    gap: 1em;
    z-index: 2;
    transition: opacity var(--animation-speed);
    box-shadow: var(--shadow-med);
}
.source-input {
    display: block;
    min-height: 10em;
    max-height: 20vh;
    padding: .5em;
    background-color: rgb(var(--white));
    border: 3px dashed rgb(var(--light));
    overflow: auto;
    font-family: monospace;
}
.source-input:focus {
    border: 3px dashed rgb(var(--dark));
    outline: none;
}
.copy-btn {
    position: absolute;
    right: 10px;
    bottom: 10px;
}


/* generic formatting classes */
.relative {
    position: relative;
}
.space-between {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: .5em;  /* minimum gap */
}
.cols-2 {
    display: flex;
    gap: 1em;
    align-items: center;
}
.square {
    aspect-ratio: 1;
}
.short-input {
    width: 3em;
}
.highlight {
    padding: .5em;
    background-color: rgb(var(--dark));
    color: rgb(var(--light));
    box-shadow: var(--shadow-med);
}
.error {
    color: crimson;
}


/* content reflow */
@media screen and (max-width: 860px){
    body {
        --columns: 3;
    }
}

@media screen and (min-width: 1200px){
    body {
        --columns: 5;
    }
}


/* dark and light theme switcher */
.theme-wrapper {
    font-size: 1rem;
    color: rgb(var(--light));
}
#theme-switcher {
    width: 3.1rem;
    color: rgb(var(--light));
    box-shadow: var(--shadow-med);
}
#theme-switcher > .front {
    background-color: rgb(var(--brown));
    color: rgb(var(--light-pink));
}
#theme-switcher > .back {
    background-color: rgb(var(--coal));
    outline: 2px solid rgb(var(--pink));
    color: rgb(var(--pink));
}
/* dark theme */
@media (prefers-color-scheme: dark) {
    /* defaults to dark theme */
    body {
        --white: var(--space);
        --light: var(--pink);
        --neutral: var(--coal);
        --dark: var(--eggshell);
        --shadow-color: 300deg 6% 2%;
    }
    /* allow OS preference ot be overridden */
    body.light-theme {
        --white: var(--eggshell);
        --light: var(--light-pink);
        --neutral: var(--pink);
        --dark: var(--brown);
        --shadow-color: 339deg 48% 52%;
    }
}
/* light theme */
@media (prefers-color-scheme: light) {
    /* defaults to light theme */
    body {
        --white: var(--eggshell);
        --light: var(--light-pink);
        --neutral: var(--pink);
        --dark: var(--brown);
        --shadow-color: 339deg 48% 52%;
    }
    /* allow OS preference ot be overridden */
    body.dark-theme {
        --white: var(--space);
        --light: var(--pink);
        --neutral: var(--coal);
        --dark: var(--light-pink);
        --shadow-color: 300deg 6% 2%;
    }
}